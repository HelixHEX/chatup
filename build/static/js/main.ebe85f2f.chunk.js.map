{"version":3,"sources":["components/Chat/InputField.js","providers/WindowWidthProvider.js","components/Chat/Message.js","utils/Socket.js","components/Chat/Chat.js","components/Login/Login.js","App.js","reportWebVitals.js","index.js"],"names":["InputField","isSubmitting","label","props","useField","field","error","colorMode","useColorMode","isInvalid","htmlFor","name","size","bg","height","pr","autoComplete","variant","id","width","isLoading","mb","colorScheme","color","rounded","_hover","mr","type","getWindowDimensions","window","innerWidth","innerHeight","socket","MobileMessages","index","message","senderName","textBubble","textColor","senderColor","mt","display","padding","roundedTopLeft","roundedTopRight","roundedBottomRight","maxW","w","fontSize","pos","overflowX","wordBreak","Message","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","useWindowDimensions","maxWidth","Chat","messages","setMessages","username","setUsername","history","useHistory","users","setUsers","cb","length","push","io","console","log","emit","join","list","on","msg","subscribeToChat","err","data","addMessage","disconnect","oldMessages","scroll","Scroll","handleSend","scrollTo","fontWeight","textAlign","ml","zIndex","bottom","initialValues","onSubmit","values","actions","setSubmitting","placeholder","map","Login","e","preventDefault","handleUsername","margin","flexDir","value","onChange","target","App","exact","path","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","extendTheme","config","initialColorMode","useSystemColorMode","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebe85f2f.chunk.js","sourcesContent":["import React from \"react\";\n\nimport {\n  Button,\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n  InputGroup,\n  InputRightElement,\n  useColorMode,\n} from \"@chakra-ui/react\";\nimport { useField } from \"formik\";\n\nexport const InputField = ({\n  isSubmitting,\n  label,\n  ...props\n}) => {\n  const [field, { error }] = useField(props);\n  const { colorMode } = useColorMode();\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\n      <InputGroup size=\"md\">\n        <Input\n          // rounded={25}\n          bg={colorMode === \"light\" ? \"gray.200\" : \"gray.800\"}\n          height=\"40px\"\n          pr=\"4.5rem\"\n          autoComplete='false'\n          variant='flushed'\n          {...field}\n          {...props}\n          id={field.name}\n        />\n        <InputRightElement width=\"4.5rem\">\n          <Button\n            isLoading={isSubmitting}\n            // variantColor={colorMode === \"light\" ? \"blue\" : \"blue\"}\n            height=\"30px\"\n            mb={3}\n            colorScheme='twitter'\n            bg='red.400'\n            color='white'\n            rounded={50}\n            _hover={{bg: 'gray.200', color: 'blue.900'}}\n            // rounded={20}\n            mr=\"10px\"\n            type=\"submit\"\n          >\n            Send\n          </Button>\n        </InputRightElement>\n      </InputGroup>\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  );\n};","import { useState, useEffect} from 'react';\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height} = window ;\n  return {\n    width,\n    height\n  }\n}\n\nexport default function useWindowDimensions() {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useEffect(() => {\n    function handleResize() {\n      setWindowDimensions(getWindowDimensions())\n    }\n\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize)\n  }, [])\n\n  return windowDimensions\n}\n","import React, { useState } from \"react\";\n\n//Chakra ui components\nimport { ListItem, Text, useColorMode, Flex, Box } from \"@chakra-ui/react\";\n\nimport useWindowDimensions from '../../providers/WindowWidthProvider'\n\n\nconst Message = ({ index, message, senderName }) => {\n  const { colorMode } = useColorMode();\n\n  let textBubble = colorMode === \"light\" ? \"blue.400\" : \"blue.900\";\n  let textColor = colorMode === \"light\" ? \"white\" : \"blue.200\";\n  let senderColor = colorMode === 'light' ? 'gray.700' : 'gray.200'\n\n  //check screen size\n  const { width } = useWindowDimensions()\n  const [maxWidth] = useState(800)\n  if (width < 768) {\n    return (\n      <MobileMessages message={message} index={index} senderName={senderName} />\n    )\n  }\n  if (index === 0) {\n    return (\n      <ListItem mt={5} >\n        <Flex\n          display=\"inline-block\"\n          padding={2}\n          roundedTopLeft={10}\n          roundedTopRight={10}\n          roundedBottomRight={10}\n          bg={textBubble}\n          maxW={maxWidth}\n          w=\"max-content\"\n        >\n          <Text fontSize=\"15px\"  color={textColor}>\n            {message}\n          </Text>\n        </Flex>\n        <Flex>\n          <Text fontSize=\"13px\" color={senderColor}>\n            {senderName}\n          </Text>\n        </Flex>\n      </ListItem>\n    );\n  }\n\n  return (\n    <ListItem pos='relative' mt={5} >\n      <Box\n        maxW={width-300}\n        w='max-content'\n        display=\"inline-block\"\n        padding={2}\n        pos='relative'\n        roundedTopLeft={10}\n        roundedTopRight={10}\n        roundedBottomRight={10}\n        bg={textBubble}\n       \n      >\n        <Text overflowX='auto' wordBreak='break-word' fontSize=\"16px\" color={textColor}>\n          {message}\n        </Text>\n      </Box>\n      <Flex>\n        <Text fontSize=\"13px\" color={senderColor} >\n          {senderName}\n        </Text>\n      </Flex>\n    </ListItem>\n  );\n};\n\nconst MobileMessages = (props: any) => {\n  const { index, message, senderName } = props\n\n  const { colorMode } = useColorMode();\n\n  let textBubble = colorMode === \"light\" ? \"blue.400\" : \"blue.900\";\n  let textColor = colorMode === \"light\" ? \"white\" : \"blue.200\";\n  let senderColor = colorMode === 'light' ? 'gray.700' : 'gray.200'\n\n  if (index === 0) {\n    return (\n      <ListItem mt={5} >\n        <Flex\n          display=\"inline-block\"\n          padding={2}\n          roundedTopLeft={10}\n          roundedTopRight={10}\n          roundedBottomRight={10}\n          bg={textBubble}\n          maxW={300}\n          w=\"max-content\"\n        >\n          <Text fontSize=\"15px\"  color={textColor}>\n            {message}\n          </Text>\n        </Flex>\n        <Flex>\n          <Text fontSize=\"13px\" color={senderColor}>\n            {senderName}\n          </Text>\n        </Flex>\n      </ListItem>\n    );\n  }\n\n  return (\n    <ListItem pos='relative' mt={5} >\n      <Box\n        maxW={300}\n        w='max-content'\n        display=\"inline-block\"\n        padding={2}\n        pos='relative'\n        roundedTopLeft={10}\n        roundedTopRight={10}\n        roundedBottomRight={10}\n        bg={textBubble}\n       \n      >\n        <Text overflowX='auto' wordBreak='break-word' fontSize=\"16px\" color={textColor}>\n          {message}\n        </Text>\n      </Box>\n      <Flex>\n        <Text fontSize=\"13px\" color={senderColor} >\n          {senderName}\n        </Text>\n      </Flex>\n    </ListItem>\n  );\n}\n\nexport default Message;","import io from 'socket.io-client'\nlet socket;\n\n// const ENDPOINT = \"http://192.168.1.164:5000\";\n\nexport const initiateSocket = () => {\n  socket = io();\n  console.log(`Connecting socket...`);\n}\n\nexport const join = (username) => {\n  if (socket) {\n    socket.emit('join', username)\n  }\n}\n\nexport const onlineusers = (cb) => {\n  if (socket) {\n    socket.on('onlineusers', users => {\n      return cb(users)\n    })\n  }\n}\n\nexport const subscribeToChat = (cb) => {\n  if (!socket) return (true)\n\n  socket.on(\"chat message\", msg => {\n    return cb(null, msg)\n  });\n}\n\nexport const sendMessage = (msg) => {\n  if (socket) socket.emit('chat message', msg)\n}\n\nexport const disconnectSocket = (id) => {\n  console.log('Disconnecting socket...');\n  if (socket) {\n    socket.emit('close', id)\n    socket.disconnect();\n  }\n}","// import logo from './logo.svg';\nimport React, { useState, useEffect } from \"react\";\nimport {\n  useColorMode,\n  Flex,\n  Box,\n  List,\n  Text,\n} from '@chakra-ui/react'\n\nimport { Form, Formik } from \"formik\";\nimport { InputField } from \"./InputField\";\nimport Message from \"./Message\";\nimport * as Scroll from \"react-scroll\";\nimport { useHistory } from \"react-router-dom\";\n// import { Helmet } from 'react-helmet'\n\nimport { join, onlineusers, sendMessage, disconnectSocket, initiateSocket, subscribeToChat } from '../../utils/Socket'\n\n// const ENDPOINT = \"http://192.168.1.164:5000\";\n// const socket = socketIOClient(ENDPOINT);\n\nconst Chat = (props) => {\n  const [messages, setMessages] = useState([]);\n  const { colorMode } = useColorMode();\n  const [username, setUsername] = useState('')\n  const history = useHistory()\n  const [users, setUsers] = useState([])\n\n  useEffect(() => {\n    if (props.username.length > 1) {\n      setUsername(props.username)\n    } else {\n      history.push('/login')\n    }\n\n    if (username) {\n      initiateSocket()\n      join(username)\n    }\n\n    onlineusers((list) => {\n      setUsers(list)\n    })\n\n    subscribeToChat((err, data) => {\n      if (err) return true \n\n      addMessage(data)\n    })\n\n    return () => {\n      disconnectSocket()\n    }\n\n    // return () => {\n    //   socket.disconnect(username);\n    // }\n    // return () => socket.disconnect()\n  }, [history, props.username, username]);\n\n  const addMessage = (msg) => {\n    setMessages(oldMessages => [...oldMessages, msg])\n  }\n\n  const scroll = Scroll.animateScroll;\n  const scrollToBottom = () => {\n    if (messages) {\n      scroll.scrollTo(messages.length * 80);\n    }\n  };\n  const handleSend = (data) => {\n    if (data.message.length >= 1) {\n      // socket.emit(\"chat message\", data);\n      sendMessage(data)\n      scrollToBottom()\n    }\n  }\n\n  if (messages.length <= 0) {\n    return (\n      <>\n        <Text fontWeight='200' fontSize={30} textAlign='center'>Welcome {username}</Text>\n        <Text fontWeight='200' fontSize={30} textAlign='center'>Online users: {users.length}</Text>\n        <Flex ml=\"10px\" w=\"100%\">\n          <Box\n            bg={colorMode === \"light\" ? \"white\" : \"gray.800\"}\n            pos=\"fixed\"\n            w={\"100%\"}\n            zIndex={10}\n            bottom=\"0\"\n          >\n            <Formik\n              initialValues={{ message: \"\" }}\n              onSubmit={(values, actions) => {\n                handleSend({\n                  message: values.message,\n                  senderName: username,\n                });\n                actions.setSubmitting(false);\n                values.message = \"\";\n              }}\n            >\n              {({ isSubmitting }) => (\n                <Form>\n                  <Box w=\"auto\" pos=\"relative\" mb=\"10px\" mr=\"20px\">\n                    <InputField\n                      label=\"\"\n                      name=\"message\"\n                      placeholder=\"Enter message\"\n                      isSubmitting={isSubmitting}\n                    />\n                  </Box>\n                </Form>\n              )}\n            </Formik>\n          </Box>\n        </Flex>\n      </>\n    );\n  }\n  return (\n    <>\n      <Text fontWeight='200' fontSize={30} textAlign='center'>Welcome {username}</Text>\n      <Text fontWeight='200' fontSize={30} textAlign='center'>Online users: {users.length}</Text>\n      <Flex ml=\"10px\" w=\"100%\">\n        <Box\n          bg={colorMode === \"light\" ? \"white\" : \"gray.800\"}\n          pos=\"fixed\"\n          w={\"100%\"}\n          zIndex={10}\n          bottom=\"0\"\n        >\n          <Formik\n            initialValues={{ message: \"\" }}\n            onSubmit={(values, actions) => {\n              handleSend({\n                message: values.message,\n                senderName: username,\n              });\n              actions.setSubmitting(false);\n              values.message = \"\";\n            }}\n          >\n            {({ isSubmitting }) => (\n              <Form>\n                <Box w=\"auto\" pos=\"relative\" mb=\"10px\" mr=\"20px\">\n                  <InputField\n                    label=\"\"\n                    name=\"message\"\n                    placeholder=\"Enter message\"\n                    isSubmitting={isSubmitting}\n                  />\n                </Box>\n              </Form>\n            )}\n          </Formik>\n        </Box>\n        <Flex mb=\"80px\" w=\"100%\" pos=\"relative\">\n          <List>\n            {messages?.map((message, index) => (\n              <div>\n                <Message\n                  id={message.id}\n                  message={message.message}\n                  senderName={message.senderName}\n                  index={index}\n                />\n              </div>\n            ))}\n          </List>\n        </Flex>\n      </Flex>\n    </>\n  );\n}\n\n\nexport default Chat;","import React, { useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport {\n  Input,\n  Button,\n  Flex,\n  Text\n} from '@chakra-ui/react'\n\nconst Login = (props) => {\n  const [username, setUsername] = useState('')\n  const history = useHistory()\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    history.push('/')\n    props.handleUsername(username)\n  }\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <Flex w='50%' margin='auto' mt='20%' flexDir='column'>\n          <Text fontSize={30} textAlign='center' fontWeight='200'>Welcome to my simple chat application!</Text>\n          <Text fontSize={30} textAlign='center' fontWeight='200'>Rigth now it's very basic but soon there will be a bunch of features like different rooms etc.</Text>\n          <Flex>\n            <Input variant='flushed' placeholder='Enter Username' value={username} onChange={(username) => setUsername(username.target.value)} />\n            <Button _hover={{bg:'gray.200', color: 'blue.900'}} bg='red.400' ml={10} type='submit'>Enter</Button>\n          </Flex>\n        </Flex>\n      </form>\n    </>\n  )\n}\n\nexport default Login","import React, {useState} from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\n\nimport Chat from './components/Chat/Chat'\nimport Login from './components/Login/Login'\n\nconst App = () => {\n  const [username, setUsername] = useState('')\n  const handleUsername = (username) => {\n    setUsername(username)\n  }\n  return (\n    <>\n      <Router>\n        <Switch>\n          <Route exact path='/' render={(props) => <Chat {...props} username={username} />} />\n          <Route exact path='/login' render={(props) => <Login {...props} handleUsername={handleUsername} />} />\n        </Switch>\n      </Router>\n    </>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ChakraProvider, extendTheme } from \"@chakra-ui/react\"\n\nconst config = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n}\n\nconst theme = extendTheme({ config })\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider theme={theme}>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}